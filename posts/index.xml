<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>//localhost:1313/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>//localhost:1313/posts/%E5%88%9B%E5%BB%BA%E7%AA%97%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/%E5%88%9B%E5%BB%BA%E7%AA%97%E5%8F%A3/</guid>
      <description>&lt;h1 id=&#34;创建窗口&#34;&gt;创建窗口&lt;/h1&gt;&#xA;&lt;p&gt;具体环境配置：&lt;a href=&#34;https://learnopengl-cn.github.io/01%20Getting%20started/02%20Creating%20a%20window/&#34;&gt;https://learnopengl-cn.github.io/01%20Getting%20started/02%20Creating%20a%20window/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;glfw&#34;&gt;GLFW&lt;/h1&gt;&#xA;&lt;p&gt;作用：创建窗口与OpenGL上下文&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;为何要自己做？&lt;br&gt;&#xA;OpenGL 只定义了渲染管线的标准（即「你怎么画」），并未规定如何创建窗口或上下文（即「在哪里画、怎样拿到上下文」）。不同操作系统对窗口管理和上下文创建的接口各不相同：Windows 用 Win32 API，Linux 用 X11/Wayland，macOS 用 Cocoa&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;抽象的好处与成本&lt;br&gt;&#xA;OpenGL 故意将这些与渲染无关的部分抽象出去，让标准更聚焦。但这也意味着开发者要自己写跨平台的窗口和上下文代码，或引入第三方库来统一接口（GLFW为其中之一）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;典型流程&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;初始化库（如 &lt;code&gt;glfwInit()&lt;/code&gt;​）&lt;/li&gt;&#xA;&lt;li&gt;创建窗口并指定 OpenGL 版本／Profile&lt;/li&gt;&#xA;&lt;li&gt;切换到该上下文（&lt;code&gt;glfwMakeContextCurrent&lt;/code&gt;​）&lt;/li&gt;&#xA;&lt;li&gt;进入渲染循环：处理事件→绘制→交换缓冲&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;glad&#34;&gt;GLAD&lt;/h1&gt;&#xA;&lt;p&gt;作用：运行时加载 OpenGL 函数指针&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;为什么要加载？&lt;br&gt;&#xA;OpenGL 的实现（驱动）由各显卡厂商提供，不同版本和扩展中的函数并不会统一导出到系统的链接库里。编译阶段无法确定它们的地址，必须在运行时询问驱动：“请给我 &lt;code&gt;glGenBuffers&lt;/code&gt;​ 这条函数的入口在哪里？”&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;原生做法（Windows 示例）&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;GL_GENBUFFERS)(GLsizei, GLuint&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GL_GENBUFFERS glGenBuffers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (GL_GENBUFFERS)&lt;span style=&#34;color:#a6e22e&#34;&gt;wglGetProcAddress&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;glGenBuffers&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 之后就能正常调用 glGenBuffers(1, &amp;amp;buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对每个函数都要如此重复，既繁琐又易错&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;使用加载库的好处&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自动化：指定所需的 OpenGL 版本和扩展后，工具帮你生成对应的加载代码&lt;/li&gt;&#xA;&lt;li&gt;精简：只包含用到的函数，减少冗余&lt;/li&gt;&#xA;&lt;li&gt;跨平台：隐藏各系统查址接口的差异，如 Windows 的 &lt;code&gt;wglGetProcAddress&lt;/code&gt;​、Linux 的 &lt;code&gt;glXGetProcAddress&lt;/code&gt;​、macOS 的 &lt;code&gt;NSGL&lt;/code&gt;​&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;创建流程&#34;&gt;创建流程&lt;/h1&gt;&#xA;&lt;h2 id=&#34;glad-1&#34;&gt;GLAD&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;首先，新建一个&lt;code&gt;.cpp&lt;/code&gt;​文件，包含GLAD和GLFW头文件&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;glad/glad.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;GLFW/glfw3.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;请确认是在包含GLFW的头文件之前包含了GLAD的头文件。GLAD的头文件包含了正确的OpenGL头文件，所以需要在其它依赖于OpenGL的头文件之前包含GLAD&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;创建main函数，实例化GLFW窗口&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glfwInit();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//for Mac:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在main函数中调用glfwInit函数来初始化GLFW&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
